{"ast":null,"code":"/**\r\n * ChessEngine - A utility to validate and generate legal chess moves\r\n * This works with the StockfishBridge to ensure only valid moves are suggested\r\n */\n\nimport { Chess } from 'chess.js';\nclass ChessEngine {\n  constructor() {\n    this.chess = new Chess();\n    this.moveHistory = [];\n  }\n\n  // Set the position from FEN\n  setPosition(fen) {\n    try {\n      this.chess.load(fen);\n      return true;\n    } catch (e) {\n      console.error('Invalid FEN:', fen, e);\n      return false;\n    }\n  }\n\n  // Get the current FEN\n  getFen() {\n    return this.chess.fen();\n  }\n\n  // Get the current turn\n  getTurn() {\n    return this.chess.turn();\n  }\n\n  // Make a move and return the result\n  makeMove(move) {\n    try {\n      const result = this.chess.move(move);\n      if (result) {\n        this.moveHistory.push(result);\n        return result;\n      }\n    } catch (e) {\n      console.error('Invalid move:', move, e);\n    }\n    return null;\n  }\n\n  // Get all legal moves for the current position\n  getLegalMoves() {\n    return this.chess.moves({\n      verbose: true\n    });\n  }\n\n  // Get legal moves for a specific square\n  getLegalMovesForSquare(square) {\n    return this.chess.moves({\n      square: square,\n      verbose: true\n    });\n  }\n\n  // Check if a move is legal\n  isMoveLegal(move) {\n    try {\n      // Create a temporary chess instance to validate the move\n      const tempChess = new Chess(this.chess.fen());\n      const result = tempChess.move(move);\n      return !!result;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  // Generate a random legal move\n  getRandomMove() {\n    const moves = this.getLegalMoves();\n    if (moves.length === 0) return null;\n    return moves[Math.floor(Math.random() * moves.length)];\n  }\n\n  // Get the best move based on simple heuristics\n  getBestMove() {\n    const moves = this.getLegalMoves();\n    if (moves.length === 0) return null;\n\n    // Prioritize captures, checks, and promotions\n    const captures = moves.filter(move => move.flags.includes('c'));\n    const checks = moves.filter(move => move.san.includes('+'));\n    const promotions = moves.filter(move => move.flags.includes('p'));\n    if (promotions.length > 0) {\n      return promotions[Math.floor(Math.random() * promotions.length)];\n    }\n    if (captures.length > 0) {\n      return captures[Math.floor(Math.random() * captures.length)];\n    }\n    if (checks.length > 0) {\n      return checks[Math.floor(Math.random() * checks.length)];\n    }\n\n    // Otherwise, return a random move\n    return moves[Math.floor(Math.random() * moves.length)];\n  }\n\n  // Check if the game is over\n  isGameOver() {\n    return this.chess.isGameOver();\n  }\n\n  // Check if the position is a checkmate\n  isCheckmate() {\n    return this.chess.isCheckmate();\n  }\n\n  // Check if the position is a draw\n  isDraw() {\n    return this.chess.isDraw();\n  }\n\n  // Reset the engine to the starting position\n  reset() {\n    this.chess.reset();\n    this.moveHistory = [];\n  }\n\n  // Get the move history\n  getMoveHistory() {\n    return this.moveHistory;\n  }\n}\nexport default ChessEngine;","map":{"version":3,"names":["Chess","ChessEngine","constructor","chess","moveHistory","setPosition","fen","load","e","console","error","getFen","getTurn","turn","makeMove","move","result","push","getLegalMoves","moves","verbose","getLegalMovesForSquare","square","isMoveLegal","tempChess","getRandomMove","length","Math","floor","random","getBestMove","captures","filter","flags","includes","checks","san","promotions","isGameOver","isCheckmate","isDraw","reset","getMoveHistory"],"sources":["C:/Users/adepu/OneDrive/Desktop/stockfish/chess-app/src/utils/chessEngine.js"],"sourcesContent":["/**\r\n * ChessEngine - A utility to validate and generate legal chess moves\r\n * This works with the StockfishBridge to ensure only valid moves are suggested\r\n */\r\n\r\nimport { Chess } from 'chess.js';\r\n\r\nclass ChessEngine {\r\n  constructor() {\r\n    this.chess = new Chess();\r\n    this.moveHistory = [];\r\n  }\r\n\r\n  // Set the position from FEN\r\n  setPosition(fen) {\r\n    try {\r\n      this.chess.load(fen);\r\n      return true;\r\n    } catch (e) {\r\n      console.error('Invalid FEN:', fen, e);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Get the current FEN\r\n  getFen() {\r\n    return this.chess.fen();\r\n  }\r\n\r\n  // Get the current turn\r\n  getTurn() {\r\n    return this.chess.turn();\r\n  }\r\n\r\n  // Make a move and return the result\r\n  makeMove(move) {\r\n    try {\r\n      const result = this.chess.move(move);\r\n      if (result) {\r\n        this.moveHistory.push(result);\r\n        return result;\r\n      }\r\n    } catch (e) {\r\n      console.error('Invalid move:', move, e);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // Get all legal moves for the current position\r\n  getLegalMoves() {\r\n    return this.chess.moves({ verbose: true });\r\n  }\r\n\r\n  // Get legal moves for a specific square\r\n  getLegalMovesForSquare(square) {\r\n    return this.chess.moves({\r\n      square: square,\r\n      verbose: true\r\n    });\r\n  }\r\n\r\n  // Check if a move is legal\r\n  isMoveLegal(move) {\r\n    try {\r\n      // Create a temporary chess instance to validate the move\r\n      const tempChess = new Chess(this.chess.fen());\r\n      const result = tempChess.move(move);\r\n      return !!result;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Generate a random legal move\r\n  getRandomMove() {\r\n    const moves = this.getLegalMoves();\r\n    if (moves.length === 0) return null;\r\n    return moves[Math.floor(Math.random() * moves.length)];\r\n  }\r\n\r\n  // Get the best move based on simple heuristics\r\n  getBestMove() {\r\n    const moves = this.getLegalMoves();\r\n    if (moves.length === 0) return null;\r\n    \r\n    // Prioritize captures, checks, and promotions\r\n    const captures = moves.filter(move => move.flags.includes('c'));\r\n    const checks = moves.filter(move => move.san.includes('+'));\r\n    const promotions = moves.filter(move => move.flags.includes('p'));\r\n    \r\n    if (promotions.length > 0) {\r\n      return promotions[Math.floor(Math.random() * promotions.length)];\r\n    }\r\n    \r\n    if (captures.length > 0) {\r\n      return captures[Math.floor(Math.random() * captures.length)];\r\n    }\r\n    \r\n    if (checks.length > 0) {\r\n      return checks[Math.floor(Math.random() * checks.length)];\r\n    }\r\n    \r\n    // Otherwise, return a random move\r\n    return moves[Math.floor(Math.random() * moves.length)];\r\n  }\r\n\r\n  // Check if the game is over\r\n  isGameOver() {\r\n    return this.chess.isGameOver();\r\n  }\r\n\r\n  // Check if the position is a checkmate\r\n  isCheckmate() {\r\n    return this.chess.isCheckmate();\r\n  }\r\n\r\n  // Check if the position is a draw\r\n  isDraw() {\r\n    return this.chess.isDraw();\r\n  }\r\n\r\n  // Reset the engine to the starting position\r\n  reset() {\r\n    this.chess.reset();\r\n    this.moveHistory = [];\r\n  }\r\n\r\n  // Get the move history\r\n  getMoveHistory() {\r\n    return this.moveHistory;\r\n  }\r\n}\r\n\r\nexport default ChessEngine; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}