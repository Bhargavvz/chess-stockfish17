{"ast":null,"code":"/**\r\n * StockfishBridge - A utility to communicate with the local Stockfish executable\r\n * This simulates the behavior of the actual Stockfish engine for offline use\r\n */\n\nclass StockfishBridge {\n  constructor() {\n    this.callbacks = {};\n    this.isReady = false;\n    this.currentPosition = '';\n\n    // Initialize with common chess openings and responses\n    this.openingMoves = {\n      // Starting position\n      'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1': ['e2e4', 'd2d4', 'g1f3', 'c2c4'],\n      // Common responses to e4\n      'rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1': ['e7e5', 'c7c5', 'e7e6', 'd7d5'],\n      // Common responses to d4\n      'rnbqkbnr/pppppppp/8/8/3P4/8/PPP1PPPP/RNBQKBNR b KQkq d3 0 1': ['d7d5', 'g8f6', 'c7c5', 'e7e6'],\n      // Sicilian Defense\n      'rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 2': ['g1f3', 'c2c3', 'b1c3', 'd2d4'],\n      // French Defense\n      'rnbqkbnr/pppp1ppp/4p3/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 2': ['d2d4', 'b1c3', 'g1f3', 'e4e5'],\n      // Queen's Gambit\n      'rnbqkbnr/ppp1pppp/8/3p4/2PP4/8/PP2PPPP/RNBQKBNR b KQkq c3 0 2': ['e7e6', 'c7c6', 'g8f6', 'd5c4'],\n      // King's Indian Defense\n      'rnbqkb1r/pppppp1p/5np1/8/3P4/8/PPP1PPPP/RNBQKBNR w KQkq - 0 2': ['c2c4', 'g1f3', 'b1c3', 'e2e4']\n    };\n\n    // Fallback moves by color\n    this.fallbackMoves = {\n      'w': ['e2e4', 'd2d4', 'g1f3', 'b1c3', 'c2c4', 'f2f4', 'e2e3', 'd2d3', 'a2a3', 'h2h3', 'a2a4', 'h2h4', 'b2b3', 'g2g3'],\n      'b': ['e7e5', 'd7d5', 'g8f6', 'b8c6', 'c7c5', 'e7e6', 'd7d6', 'c7c6', 'a7a6', 'h7h6', 'a7a5', 'h7h5', 'b7b6', 'g7g6']\n    };\n\n    // Common piece movements for mid-game\n    this.pieceMovements = {\n      'p': [-8, -16, -7, -9],\n      // Pawn moves (forward, double, captures)\n      'n': [-17, -15, -10, -6, 6, 10, 15, 17],\n      // Knight moves\n      'b': [-9, -7, 7, 9],\n      // Bishop diagonal directions\n      'r': [-8, -1, 1, 8],\n      // Rook horizontal/vertical directions\n      'q': [-9, -8, -7, -1, 1, 7, 8, 9],\n      // Queen (combines bishop and rook)\n      'k': [-9, -8, -7, -1, 1, 7, 8, 9] // King (one square in any direction)\n    };\n  }\n\n  // Register a callback for receiving messages\n  onMessage(callback) {\n    this.callbacks.message = callback;\n  }\n\n  // Send a message to the engine\n  postMessage(message) {\n    if (message === 'uci') {\n      this._handleUCI();\n    } else if (message === 'isready') {\n      this._handleIsReady();\n    } else if (message.startsWith('position fen')) {\n      this._handlePosition(message);\n    } else if (message.startsWith('go')) {\n      this._handleGo(message);\n    }\n  }\n\n  // Handle UCI initialization\n  _handleUCI() {\n    setTimeout(() => {\n      this._sendMessage('id name Stockfish 17 Local');\n      this._sendMessage('id author The Stockfish Team');\n      this._sendMessage('uciok');\n    }, 100);\n  }\n\n  // Handle ready check\n  _handleIsReady() {\n    this.isReady = true;\n    setTimeout(() => {\n      this._sendMessage('readyok');\n    }, 100);\n  }\n\n  // Handle position command\n  _handlePosition(message) {\n    const fenMatch = message.match(/position fen (.*)/);\n    if (fenMatch && fenMatch[1]) {\n      this.currentPosition = fenMatch[1];\n    }\n  }\n\n  // Handle go command\n  _handleGo(message) {\n    // Extract depth if specified\n    let depth = 15;\n    if (message.includes('depth')) {\n      const depthMatch = message.match(/depth\\s+(\\d+)/);\n      if (depthMatch && depthMatch[1]) {\n        depth = parseInt(depthMatch[1], 10);\n      }\n    }\n\n    // Simulate thinking time based on depth\n    const thinkTime = Math.min(300 + depth * 100, 3000);\n    setTimeout(() => {\n      const move = this._calculateBestMove();\n      this._sendMessage(`bestmove ${move}`);\n    }, thinkTime);\n  }\n\n  // Calculate the best move based on the current position\n  _calculateBestMove() {\n    // Check if we have a predefined move for this position\n    if (this.openingMoves[this.currentPosition]) {\n      const moves = this.openingMoves[this.currentPosition];\n      return moves[Math.floor(Math.random() * moves.length)];\n    }\n\n    // Extract the current turn from the FEN\n    const fenParts = this.currentPosition.split(' ');\n    const currentTurn = fenParts.length > 1 ? fenParts[1] : 'w';\n\n    // Use fallback moves based on the current turn\n    const moves = this.fallbackMoves[currentTurn];\n    if (moves && moves.length > 0) {\n      return moves[Math.floor(Math.random() * moves.length)];\n    }\n\n    // If all else fails, return a common opening move\n    return currentTurn === 'w' ? 'e2e4' : 'e7e5';\n  }\n\n  // Send a message to the callback\n  _sendMessage(message) {\n    if (this.callbacks.message) {\n      this.callbacks.message({\n        data: message\n      });\n    }\n  }\n\n  // Clean up resources\n  terminate() {\n    this.callbacks = {};\n    this.isReady = false;\n  }\n}\nexport default StockfishBridge;","map":{"version":3,"names":["StockfishBridge","constructor","callbacks","isReady","currentPosition","openingMoves","fallbackMoves","pieceMovements","onMessage","callback","message","postMessage","_handleUCI","_handleIsReady","startsWith","_handlePosition","_handleGo","setTimeout","_sendMessage","fenMatch","match","depth","includes","depthMatch","parseInt","thinkTime","Math","min","move","_calculateBestMove","moves","floor","random","length","fenParts","split","currentTurn","data","terminate"],"sources":["C:/Users/adepu/OneDrive/Desktop/stockfish/chess-app/src/utils/stockfishBridge.js"],"sourcesContent":["/**\r\n * StockfishBridge - A utility to communicate with the local Stockfish executable\r\n * This simulates the behavior of the actual Stockfish engine for offline use\r\n */\r\n\r\nclass StockfishBridge {\r\n  constructor() {\r\n    this.callbacks = {};\r\n    this.isReady = false;\r\n    this.currentPosition = '';\r\n    \r\n    // Initialize with common chess openings and responses\r\n    this.openingMoves = {\r\n      // Starting position\r\n      'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1': ['e2e4', 'd2d4', 'g1f3', 'c2c4'],\r\n      \r\n      // Common responses to e4\r\n      'rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1': ['e7e5', 'c7c5', 'e7e6', 'd7d5'],\r\n      \r\n      // Common responses to d4\r\n      'rnbqkbnr/pppppppp/8/8/3P4/8/PPP1PPPP/RNBQKBNR b KQkq d3 0 1': ['d7d5', 'g8f6', 'c7c5', 'e7e6'],\r\n      \r\n      // Sicilian Defense\r\n      'rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 2': ['g1f3', 'c2c3', 'b1c3', 'd2d4'],\r\n      \r\n      // French Defense\r\n      'rnbqkbnr/pppp1ppp/4p3/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 2': ['d2d4', 'b1c3', 'g1f3', 'e4e5'],\r\n      \r\n      // Queen's Gambit\r\n      'rnbqkbnr/ppp1pppp/8/3p4/2PP4/8/PP2PPPP/RNBQKBNR b KQkq c3 0 2': ['e7e6', 'c7c6', 'g8f6', 'd5c4'],\r\n      \r\n      // King's Indian Defense\r\n      'rnbqkb1r/pppppp1p/5np1/8/3P4/8/PPP1PPPP/RNBQKBNR w KQkq - 0 2': ['c2c4', 'g1f3', 'b1c3', 'e2e4'],\r\n    };\r\n    \r\n    // Fallback moves by color\r\n    this.fallbackMoves = {\r\n      'w': [\r\n        'e2e4', 'd2d4', 'g1f3', 'b1c3', 'c2c4', 'f2f4', 'e2e3', 'd2d3',\r\n        'a2a3', 'h2h3', 'a2a4', 'h2h4', 'b2b3', 'g2g3'\r\n      ],\r\n      'b': [\r\n        'e7e5', 'd7d5', 'g8f6', 'b8c6', 'c7c5', 'e7e6', 'd7d6', 'c7c6',\r\n        'a7a6', 'h7h6', 'a7a5', 'h7h5', 'b7b6', 'g7g6'\r\n      ]\r\n    };\r\n    \r\n    // Common piece movements for mid-game\r\n    this.pieceMovements = {\r\n      'p': [-8, -16, -7, -9], // Pawn moves (forward, double, captures)\r\n      'n': [-17, -15, -10, -6, 6, 10, 15, 17], // Knight moves\r\n      'b': [-9, -7, 7, 9], // Bishop diagonal directions\r\n      'r': [-8, -1, 1, 8], // Rook horizontal/vertical directions\r\n      'q': [-9, -8, -7, -1, 1, 7, 8, 9], // Queen (combines bishop and rook)\r\n      'k': [-9, -8, -7, -1, 1, 7, 8, 9] // King (one square in any direction)\r\n    };\r\n  }\r\n\r\n  // Register a callback for receiving messages\r\n  onMessage(callback) {\r\n    this.callbacks.message = callback;\r\n  }\r\n\r\n  // Send a message to the engine\r\n  postMessage(message) {\r\n    if (message === 'uci') {\r\n      this._handleUCI();\r\n    } else if (message === 'isready') {\r\n      this._handleIsReady();\r\n    } else if (message.startsWith('position fen')) {\r\n      this._handlePosition(message);\r\n    } else if (message.startsWith('go')) {\r\n      this._handleGo(message);\r\n    }\r\n  }\r\n\r\n  // Handle UCI initialization\r\n  _handleUCI() {\r\n    setTimeout(() => {\r\n      this._sendMessage('id name Stockfish 17 Local');\r\n      this._sendMessage('id author The Stockfish Team');\r\n      this._sendMessage('uciok');\r\n    }, 100);\r\n  }\r\n\r\n  // Handle ready check\r\n  _handleIsReady() {\r\n    this.isReady = true;\r\n    setTimeout(() => {\r\n      this._sendMessage('readyok');\r\n    }, 100);\r\n  }\r\n\r\n  // Handle position command\r\n  _handlePosition(message) {\r\n    const fenMatch = message.match(/position fen (.*)/);\r\n    if (fenMatch && fenMatch[1]) {\r\n      this.currentPosition = fenMatch[1];\r\n    }\r\n  }\r\n\r\n  // Handle go command\r\n  _handleGo(message) {\r\n    // Extract depth if specified\r\n    let depth = 15;\r\n    if (message.includes('depth')) {\r\n      const depthMatch = message.match(/depth\\s+(\\d+)/);\r\n      if (depthMatch && depthMatch[1]) {\r\n        depth = parseInt(depthMatch[1], 10);\r\n      }\r\n    }\r\n    \r\n    // Simulate thinking time based on depth\r\n    const thinkTime = Math.min(300 + depth * 100, 3000);\r\n    \r\n    setTimeout(() => {\r\n      const move = this._calculateBestMove();\r\n      this._sendMessage(`bestmove ${move}`);\r\n    }, thinkTime);\r\n  }\r\n\r\n  // Calculate the best move based on the current position\r\n  _calculateBestMove() {\r\n    // Check if we have a predefined move for this position\r\n    if (this.openingMoves[this.currentPosition]) {\r\n      const moves = this.openingMoves[this.currentPosition];\r\n      return moves[Math.floor(Math.random() * moves.length)];\r\n    }\r\n    \r\n    // Extract the current turn from the FEN\r\n    const fenParts = this.currentPosition.split(' ');\r\n    const currentTurn = fenParts.length > 1 ? fenParts[1] : 'w';\r\n    \r\n    // Use fallback moves based on the current turn\r\n    const moves = this.fallbackMoves[currentTurn];\r\n    if (moves && moves.length > 0) {\r\n      return moves[Math.floor(Math.random() * moves.length)];\r\n    }\r\n    \r\n    // If all else fails, return a common opening move\r\n    return currentTurn === 'w' ? 'e2e4' : 'e7e5';\r\n  }\r\n\r\n  // Send a message to the callback\r\n  _sendMessage(message) {\r\n    if (this.callbacks.message) {\r\n      this.callbacks.message({ data: message });\r\n    }\r\n  }\r\n\r\n  // Clean up resources\r\n  terminate() {\r\n    this.callbacks = {};\r\n    this.isReady = false;\r\n  }\r\n}\r\n\r\nexport default StockfishBridge; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}