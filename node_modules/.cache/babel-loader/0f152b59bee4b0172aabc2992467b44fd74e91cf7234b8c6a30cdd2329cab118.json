{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adepu\\\\OneDrive\\\\Desktop\\\\stockfish\\\\chess-app\\\\src\\\\components\\\\ChessGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';\nimport { Chess } from 'chess.js';\nimport { Chessboard } from 'react-chessboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessGame = ({\n  playerColor,\n  searchDepth = 15\n}) => {\n  _s();\n  const [game, setGame] = useState(new Chess());\n  const [stockfish, setStockfish] = useState(null);\n  const [isThinking, setIsThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [lastMove, setLastMove] = useState(null);\n  const [gameStatus, setGameStatus] = useState('');\n  const [engineReady, setEngineReady] = useState(false);\n\n  // Refs to avoid stale closures in callbacks\n  const gameRef = useRef();\n  gameRef.current = game;\n\n  // Initialize Stockfish\n  useEffect(() => {\n    const worker = new Worker('/stockfish.js');\n    worker.onmessage = event => {\n      const message = event.data;\n      if (message === 'uciok') {\n        worker.postMessage('isready');\n      } else if (message === 'readyok') {\n        setEngineReady(true);\n      } else if (message.startsWith('bestmove')) {\n        const moveStr = message.split(' ')[1];\n        if (moveStr && moveStr !== '(none)') {\n          makeMove(moveStr);\n        }\n        setIsThinking(false);\n      }\n    };\n    setStockfish(worker);\n    worker.postMessage('uci');\n    return () => {\n      worker.terminate();\n    };\n  }, []);\n\n  // Update game status\n  useEffect(() => {\n    if (game.isGameOver()) {\n      if (game.isCheckmate()) {\n        setGameStatus(`Checkmate! ${game.turn() === 'w' ? 'Black' : 'White'} wins.`);\n      } else if (game.isDraw()) {\n        if (game.isStalemate()) {\n          setGameStatus('Draw by stalemate.');\n        } else if (game.isThreefoldRepetition()) {\n          setGameStatus('Draw by threefold repetition.');\n        } else if (game.isInsufficientMaterial()) {\n          setGameStatus('Draw by insufficient material.');\n        } else {\n          setGameStatus('Draw by 50-move rule.');\n        }\n      }\n    } else {\n      setGameStatus(`${game.turn() === 'w' ? 'White' : 'Black'} to move`);\n    }\n  }, [game]);\n\n  // Make a move on the board\n  const makeMove = useCallback(move => {\n    try {\n      const gameCopy = new Chess(gameRef.current.fen());\n      const result = gameCopy.move(move);\n      if (result) {\n        // Update move history\n        setMoveHistory(prevHistory => {\n          const newHistory = [...prevHistory];\n          newHistory.push(result);\n          return newHistory;\n        });\n\n        // Set last move for highlighting\n        setLastMove({\n          from: result.from,\n          to: result.to\n        });\n        setGame(gameCopy);\n        return true;\n      }\n    } catch (e) {\n      console.error('Invalid move:', move, e);\n      return false;\n    }\n    return false;\n  }, []);\n\n  // Get Stockfish's move\n  const getEngineMove = useCallback(() => {\n    if (!engineReady || game.isGameOver()) return;\n    setIsThinking(true);\n    stockfish.postMessage(`position fen ${game.fen()}`);\n    stockfish.postMessage(`go depth ${searchDepth}`);\n  }, [engineReady, game, searchDepth, stockfish]);\n\n  // Handle player moves\n  const onDrop = (sourceSquare, targetSquare) => {\n    // Don't allow moves during engine thinking\n    if (isThinking) return false;\n\n    // Only allow moves if it's the player's turn\n    if (game.turn() === 'w' && playerColor === 'black' || game.turn() === 'b' && playerColor === 'white') {\n      return false;\n    }\n\n    // Try to make the move\n    const move = makeMove({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: 'q' // Always promote to queen for simplicity\n    });\n\n    // If move was successful and game isn't over, get engine's move\n    if (move && !game.isGameOver()) {\n      setTimeout(() => {\n        getEngineMove();\n      }, 300);\n    }\n    return move;\n  };\n\n  // Make AI move if it's AI's turn at the start or after color change\n  useEffect(() => {\n    if (engineReady && !game.isGameOver() && (game.turn() === 'w' && playerColor === 'black' || game.turn() === 'b' && playerColor === 'white')) {\n      setTimeout(() => {\n        getEngineMove();\n      }, 500);\n    }\n  }, [engineReady, game, playerColor, getEngineMove]);\n\n  // Format move history for display\n  const formattedHistory = useMemo(() => {\n    const formattedMoves = [];\n    for (let i = 0; i < moveHistory.length; i += 2) {\n      var _moveHistory$i, _moveHistory;\n      const moveNumber = Math.floor(i / 2) + 1;\n      const whiteMove = ((_moveHistory$i = moveHistory[i]) === null || _moveHistory$i === void 0 ? void 0 : _moveHistory$i.san) || '';\n      const blackMove = ((_moveHistory = moveHistory[i + 1]) === null || _moveHistory === void 0 ? void 0 : _moveHistory.san) || '';\n      formattedMoves.push({\n        moveNumber,\n        whiteMove,\n        blackMove\n      });\n    }\n    return formattedMoves;\n  }, [moveHistory]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chess-game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-container\",\n      children: /*#__PURE__*/_jsxDEV(Chessboard, {\n        position: game.fen(),\n        onPieceDrop: onDrop,\n        boardOrientation: playerColor,\n        customBoardStyle: {\n          borderRadius: '4px',\n          boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n        },\n        customSquareStyles: {\n          ...(lastMove ? {\n            [lastMove.from]: {\n              backgroundColor: 'rgba(255, 255, 0, 0.4)'\n            },\n            [lastMove.to]: {\n              backgroundColor: 'rgba(255, 255, 0, 0.4)'\n            }\n          } : {})\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info-card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `status-indicator ${isThinking ? 'thinking' : game.isCheckmate() ? 'checkmate' : game.isDraw() ? 'draw' : 'active'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Status:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), isThinking ? 'Stockfish is thinking...' : gameStatus]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Move History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"move-history\",\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"move-list\",\n            children: formattedHistory.map(move => /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"move-number\",\n                children: [move.moveNumber, \".\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"move-white\",\n                children: move.whiteMove\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"move-black\",\n                children: move.blackMove\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 19\n              }, this)]\n            }, move.moveNumber, true, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessGame, \"P+txpuBDXMWMn9A4EmLc36S39B8=\");\n_c = ChessGame;\nexport default ChessGame;\nvar _c;\n$RefreshReg$(_c, \"ChessGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","useMemo","Chess","Chessboard","jsxDEV","_jsxDEV","ChessGame","playerColor","searchDepth","_s","game","setGame","stockfish","setStockfish","isThinking","setIsThinking","moveHistory","setMoveHistory","lastMove","setLastMove","gameStatus","setGameStatus","engineReady","setEngineReady","gameRef","current","worker","Worker","onmessage","event","message","data","postMessage","startsWith","moveStr","split","makeMove","terminate","isGameOver","isCheckmate","turn","isDraw","isStalemate","isThreefoldRepetition","isInsufficientMaterial","move","gameCopy","fen","result","prevHistory","newHistory","push","from","to","e","console","error","getEngineMove","onDrop","sourceSquare","targetSquare","promotion","setTimeout","formattedHistory","formattedMoves","i","length","_moveHistory$i","_moveHistory","moveNumber","Math","floor","whiteMove","san","blackMove","className","children","position","onPieceDrop","boardOrientation","customBoardStyle","borderRadius","boxShadow","customSquareStyles","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","map","Fragment","_c","$RefreshReg$"],"sources":["C:/Users/adepu/OneDrive/Desktop/stockfish/chess-app/src/components/ChessGame.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';\r\nimport { Chess } from 'chess.js';\r\nimport { Chessboard } from 'react-chessboard';\r\n\r\nconst ChessGame = ({ playerColor, searchDepth = 15 }) => {\r\n  const [game, setGame] = useState(new Chess());\r\n  const [stockfish, setStockfish] = useState(null);\r\n  const [isThinking, setIsThinking] = useState(false);\r\n  const [moveHistory, setMoveHistory] = useState([]);\r\n  const [lastMove, setLastMove] = useState(null);\r\n  const [gameStatus, setGameStatus] = useState('');\r\n  const [engineReady, setEngineReady] = useState(false);\r\n  \r\n  // Refs to avoid stale closures in callbacks\r\n  const gameRef = useRef();\r\n  gameRef.current = game;\r\n\r\n  // Initialize Stockfish\r\n  useEffect(() => {\r\n    const worker = new Worker('/stockfish.js');\r\n    \r\n    worker.onmessage = (event) => {\r\n      const message = event.data;\r\n      \r\n      if (message === 'uciok') {\r\n        worker.postMessage('isready');\r\n      } else if (message === 'readyok') {\r\n        setEngineReady(true);\r\n      } else if (message.startsWith('bestmove')) {\r\n        const moveStr = message.split(' ')[1];\r\n        if (moveStr && moveStr !== '(none)') {\r\n          makeMove(moveStr);\r\n        }\r\n        setIsThinking(false);\r\n      }\r\n    };\r\n    \r\n    setStockfish(worker);\r\n    worker.postMessage('uci');\r\n    \r\n    return () => {\r\n      worker.terminate();\r\n    };\r\n  }, []);\r\n\r\n  // Update game status\r\n  useEffect(() => {\r\n    if (game.isGameOver()) {\r\n      if (game.isCheckmate()) {\r\n        setGameStatus(`Checkmate! ${game.turn() === 'w' ? 'Black' : 'White'} wins.`);\r\n      } else if (game.isDraw()) {\r\n        if (game.isStalemate()) {\r\n          setGameStatus('Draw by stalemate.');\r\n        } else if (game.isThreefoldRepetition()) {\r\n          setGameStatus('Draw by threefold repetition.');\r\n        } else if (game.isInsufficientMaterial()) {\r\n          setGameStatus('Draw by insufficient material.');\r\n        } else {\r\n          setGameStatus('Draw by 50-move rule.');\r\n        }\r\n      }\r\n    } else {\r\n      setGameStatus(`${game.turn() === 'w' ? 'White' : 'Black'} to move`);\r\n    }\r\n  }, [game]);\r\n\r\n  // Make a move on the board\r\n  const makeMove = useCallback((move) => {\r\n    try {\r\n      const gameCopy = new Chess(gameRef.current.fen());\r\n      const result = gameCopy.move(move);\r\n      \r\n      if (result) {\r\n        // Update move history\r\n        setMoveHistory(prevHistory => {\r\n          const newHistory = [...prevHistory];\r\n          newHistory.push(result);\r\n          return newHistory;\r\n        });\r\n        \r\n        // Set last move for highlighting\r\n        setLastMove({\r\n          from: result.from,\r\n          to: result.to\r\n        });\r\n        \r\n        setGame(gameCopy);\r\n        return true;\r\n      }\r\n    } catch (e) {\r\n      console.error('Invalid move:', move, e);\r\n      return false;\r\n    }\r\n    return false;\r\n  }, []);\r\n\r\n  // Get Stockfish's move\r\n  const getEngineMove = useCallback(() => {\r\n    if (!engineReady || game.isGameOver()) return;\r\n    \r\n    setIsThinking(true);\r\n    stockfish.postMessage(`position fen ${game.fen()}`);\r\n    stockfish.postMessage(`go depth ${searchDepth}`);\r\n  }, [engineReady, game, searchDepth, stockfish]);\r\n\r\n  // Handle player moves\r\n  const onDrop = (sourceSquare, targetSquare) => {\r\n    // Don't allow moves during engine thinking\r\n    if (isThinking) return false;\r\n    \r\n    // Only allow moves if it's the player's turn\r\n    if ((game.turn() === 'w' && playerColor === 'black') ||\r\n        (game.turn() === 'b' && playerColor === 'white')) {\r\n      return false;\r\n    }\r\n    \r\n    // Try to make the move\r\n    const move = makeMove({\r\n      from: sourceSquare,\r\n      to: targetSquare,\r\n      promotion: 'q', // Always promote to queen for simplicity\r\n    });\r\n    \r\n    // If move was successful and game isn't over, get engine's move\r\n    if (move && !game.isGameOver()) {\r\n      setTimeout(() => {\r\n        getEngineMove();\r\n      }, 300);\r\n    }\r\n    \r\n    return move;\r\n  };\r\n\r\n  // Make AI move if it's AI's turn at the start or after color change\r\n  useEffect(() => {\r\n    if (engineReady && \r\n        !game.isGameOver() && \r\n        ((game.turn() === 'w' && playerColor === 'black') ||\r\n         (game.turn() === 'b' && playerColor === 'white'))) {\r\n      setTimeout(() => {\r\n        getEngineMove();\r\n      }, 500);\r\n    }\r\n  }, [engineReady, game, playerColor, getEngineMove]);\r\n\r\n  // Format move history for display\r\n  const formattedHistory = useMemo(() => {\r\n    const formattedMoves = [];\r\n    for (let i = 0; i < moveHistory.length; i += 2) {\r\n      const moveNumber = Math.floor(i / 2) + 1;\r\n      const whiteMove = moveHistory[i]?.san || '';\r\n      const blackMove = moveHistory[i + 1]?.san || '';\r\n      formattedMoves.push({ moveNumber, whiteMove, blackMove });\r\n    }\r\n    return formattedMoves;\r\n  }, [moveHistory]);\r\n\r\n  return (\r\n    <div className=\"chess-game\">\r\n      <div className=\"board-container\">\r\n        <Chessboard\r\n          position={game.fen()}\r\n          onPieceDrop={onDrop}\r\n          boardOrientation={playerColor}\r\n          customBoardStyle={{\r\n            borderRadius: '4px',\r\n            boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\r\n          }}\r\n          customSquareStyles={{\r\n            ...(lastMove ? {\r\n              [lastMove.from]: { backgroundColor: 'rgba(255, 255, 0, 0.4)' },\r\n              [lastMove.to]: { backgroundColor: 'rgba(255, 255, 0, 0.4)' }\r\n            } : {})\r\n          }}\r\n        />\r\n      </div>\r\n      \r\n      <div className=\"game-info-panel\">\r\n        <div className=\"info-card\">\r\n          <div className={`status-indicator ${isThinking ? 'thinking' : game.isCheckmate() ? 'checkmate' : game.isDraw() ? 'draw' : 'active'}`}>\r\n            <span>Status:</span> \r\n            {isThinking ? 'Stockfish is thinking...' : gameStatus}\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"info-card\">\r\n          <h3>Move History</h3>\r\n          <div className=\"move-history\">\r\n            <ul className=\"move-list\">\r\n              {formattedHistory.map((move) => (\r\n                <React.Fragment key={move.moveNumber}>\r\n                  <span className=\"move-number\">{move.moveNumber}.</span>\r\n                  <span className=\"move-white\">{move.whiteMove}</span>\r\n                  <span className=\"move-black\">{move.blackMove}</span>\r\n                </React.Fragment>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChessGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}