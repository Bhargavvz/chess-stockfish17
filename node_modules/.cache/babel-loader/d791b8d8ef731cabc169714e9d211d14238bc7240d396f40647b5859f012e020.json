{"ast":null,"code":"/**\r\n * ChessAI - A service that combines StockfishBridge and ChessEngine\r\n * to provide a complete chess AI that generates valid moves\r\n */\n\nimport StockfishBridge from './stockfishBridge';\nimport ChessEngine from './chessEngine';\nclass ChessAI {\n  constructor() {\n    this.stockfish = new StockfishBridge();\n    this.engine = new ChessEngine();\n    this.callbacks = {};\n    this.isReady = false;\n    this.isThinking = false;\n    this.searchDepth = 15;\n\n    // Set up the Stockfish bridge\n    this.stockfish.onMessage(this._handleStockfishMessage.bind(this));\n  }\n\n  // Initialize the AI\n  init() {\n    this.stockfish.postMessage('uci');\n  }\n\n  // Set the search depth\n  setSearchDepth(depth) {\n    this.searchDepth = depth;\n  }\n\n  // Set the position from FEN\n  setPosition(fen) {\n    if (this.engine.setPosition(fen)) {\n      this.stockfish.postMessage(`position fen ${fen}`);\n      return true;\n    }\n    return false;\n  }\n\n  // Make a move\n  makeMove(move) {\n    const result = this.engine.makeMove(move);\n    if (result) {\n      this.stockfish.postMessage(`position fen ${this.engine.getFen()}`);\n      return result;\n    }\n    return null;\n  }\n\n  // Get the best move from the AI\n  getBestMove(callback) {\n    if (!this.isReady || this.isThinking) {\n      return false;\n    }\n    this.callbacks.bestMove = callback;\n    this.isThinking = true;\n\n    // First try to get a move from Stockfish\n    this.stockfish.postMessage(`go depth ${this.searchDepth}`);\n    return true;\n  }\n\n  // Get legal moves for a square\n  getLegalMovesForSquare(square) {\n    return this.engine.getLegalMovesForSquare(square);\n  }\n\n  // Get all legal moves\n  getLegalMoves() {\n    return this.engine.getLegalMoves();\n  }\n\n  // Check if the game is over\n  isGameOver() {\n    return this.engine.isGameOver();\n  }\n\n  // Check if the position is a checkmate\n  isCheckmate() {\n    return this.engine.isCheckmate();\n  }\n\n  // Check if the position is a draw\n  isDraw() {\n    return this.engine.isDraw();\n  }\n\n  // Get the current FEN\n  getFen() {\n    return this.engine.getFen();\n  }\n\n  // Get the current turn\n  getTurn() {\n    return this.engine.getTurn();\n  }\n\n  // Get move history\n  getMoveHistory() {\n    return this.engine.getMoveHistory();\n  }\n\n  // Reset the AI\n  reset() {\n    this.engine.reset();\n    this.stockfish.postMessage(`position fen ${this.engine.getFen()}`);\n  }\n\n  // Handle messages from Stockfish\n  _handleStockfishMessage(event) {\n    const message = event.data;\n    if (message === 'uciok') {\n      this.stockfish.postMessage('isready');\n    } else if (message === 'readyok') {\n      this.isReady = true;\n      if (this.callbacks.ready) {\n        this.callbacks.ready();\n      }\n    } else if (message.startsWith('bestmove')) {\n      this.isThinking = false;\n\n      // Extract the move\n      const moveMatch = message.match(/bestmove\\s+(\\S+)/);\n      if (moveMatch && moveMatch[1]) {\n        const moveStr = moveMatch[1];\n\n        // Validate the move\n        if (this.engine.isMoveLegal(moveStr)) {\n          if (this.callbacks.bestMove) {\n            this.callbacks.bestMove(moveStr);\n          }\n        } else {\n          // If Stockfish suggests an invalid move, use our engine's best move\n          const bestMove = this.engine.getBestMove();\n          if (bestMove && this.callbacks.bestMove) {\n            this.callbacks.bestMove(bestMove);\n          }\n        }\n      }\n    }\n  }\n\n  // Register a callback for when the AI is ready\n  onReady(callback) {\n    this.callbacks.ready = callback;\n    if (this.isReady && callback) {\n      callback();\n    }\n  }\n\n  // Clean up resources\n  terminate() {\n    this.stockfish.terminate();\n    this.callbacks = {};\n  }\n}\nexport default ChessAI;","map":{"version":3,"names":["StockfishBridge","ChessEngine","ChessAI","constructor","stockfish","engine","callbacks","isReady","isThinking","searchDepth","onMessage","_handleStockfishMessage","bind","init","postMessage","setSearchDepth","depth","setPosition","fen","makeMove","move","result","getFen","getBestMove","callback","bestMove","getLegalMovesForSquare","square","getLegalMoves","isGameOver","isCheckmate","isDraw","getTurn","getMoveHistory","reset","event","message","data","ready","startsWith","moveMatch","match","moveStr","isMoveLegal","onReady","terminate"],"sources":["C:/Users/adepu/OneDrive/Desktop/stockfish/chess-app/src/utils/chessAI.js"],"sourcesContent":["/**\r\n * ChessAI - A service that combines StockfishBridge and ChessEngine\r\n * to provide a complete chess AI that generates valid moves\r\n */\r\n\r\nimport StockfishBridge from './stockfishBridge';\r\nimport ChessEngine from './chessEngine';\r\n\r\nclass ChessAI {\r\n  constructor() {\r\n    this.stockfish = new StockfishBridge();\r\n    this.engine = new ChessEngine();\r\n    this.callbacks = {};\r\n    this.isReady = false;\r\n    this.isThinking = false;\r\n    this.searchDepth = 15;\r\n    \r\n    // Set up the Stockfish bridge\r\n    this.stockfish.onMessage(this._handleStockfishMessage.bind(this));\r\n  }\r\n\r\n  // Initialize the AI\r\n  init() {\r\n    this.stockfish.postMessage('uci');\r\n  }\r\n\r\n  // Set the search depth\r\n  setSearchDepth(depth) {\r\n    this.searchDepth = depth;\r\n  }\r\n\r\n  // Set the position from FEN\r\n  setPosition(fen) {\r\n    if (this.engine.setPosition(fen)) {\r\n      this.stockfish.postMessage(`position fen ${fen}`);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Make a move\r\n  makeMove(move) {\r\n    const result = this.engine.makeMove(move);\r\n    if (result) {\r\n      this.stockfish.postMessage(`position fen ${this.engine.getFen()}`);\r\n      return result;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // Get the best move from the AI\r\n  getBestMove(callback) {\r\n    if (!this.isReady || this.isThinking) {\r\n      return false;\r\n    }\r\n    \r\n    this.callbacks.bestMove = callback;\r\n    this.isThinking = true;\r\n    \r\n    // First try to get a move from Stockfish\r\n    this.stockfish.postMessage(`go depth ${this.searchDepth}`);\r\n    \r\n    return true;\r\n  }\r\n\r\n  // Get legal moves for a square\r\n  getLegalMovesForSquare(square) {\r\n    return this.engine.getLegalMovesForSquare(square);\r\n  }\r\n\r\n  // Get all legal moves\r\n  getLegalMoves() {\r\n    return this.engine.getLegalMoves();\r\n  }\r\n\r\n  // Check if the game is over\r\n  isGameOver() {\r\n    return this.engine.isGameOver();\r\n  }\r\n\r\n  // Check if the position is a checkmate\r\n  isCheckmate() {\r\n    return this.engine.isCheckmate();\r\n  }\r\n\r\n  // Check if the position is a draw\r\n  isDraw() {\r\n    return this.engine.isDraw();\r\n  }\r\n\r\n  // Get the current FEN\r\n  getFen() {\r\n    return this.engine.getFen();\r\n  }\r\n\r\n  // Get the current turn\r\n  getTurn() {\r\n    return this.engine.getTurn();\r\n  }\r\n\r\n  // Get move history\r\n  getMoveHistory() {\r\n    return this.engine.getMoveHistory();\r\n  }\r\n\r\n  // Reset the AI\r\n  reset() {\r\n    this.engine.reset();\r\n    this.stockfish.postMessage(`position fen ${this.engine.getFen()}`);\r\n  }\r\n\r\n  // Handle messages from Stockfish\r\n  _handleStockfishMessage(event) {\r\n    const message = event.data;\r\n    \r\n    if (message === 'uciok') {\r\n      this.stockfish.postMessage('isready');\r\n    } else if (message === 'readyok') {\r\n      this.isReady = true;\r\n      if (this.callbacks.ready) {\r\n        this.callbacks.ready();\r\n      }\r\n    } else if (message.startsWith('bestmove')) {\r\n      this.isThinking = false;\r\n      \r\n      // Extract the move\r\n      const moveMatch = message.match(/bestmove\\s+(\\S+)/);\r\n      if (moveMatch && moveMatch[1]) {\r\n        const moveStr = moveMatch[1];\r\n        \r\n        // Validate the move\r\n        if (this.engine.isMoveLegal(moveStr)) {\r\n          if (this.callbacks.bestMove) {\r\n            this.callbacks.bestMove(moveStr);\r\n          }\r\n        } else {\r\n          // If Stockfish suggests an invalid move, use our engine's best move\r\n          const bestMove = this.engine.getBestMove();\r\n          if (bestMove && this.callbacks.bestMove) {\r\n            this.callbacks.bestMove(bestMove);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Register a callback for when the AI is ready\r\n  onReady(callback) {\r\n    this.callbacks.ready = callback;\r\n    if (this.isReady && callback) {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  // Clean up resources\r\n  terminate() {\r\n    this.stockfish.terminate();\r\n    this.callbacks = {};\r\n  }\r\n}\r\n\r\nexport default ChessAI; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}